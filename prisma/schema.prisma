generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  xeroUserId    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  transactions  InvoiceTransaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InvoiceTransaction {
  id                     String   @id @default(cuid())
  xeroInvoiceId          String
  xeroOrgId              String
  xeroTenantId           String
  originalContactName    String
  transformedContactName String
  businessUnitCode       String
  agencyName             String
  peppolId               String
  invoiceNowEmail        String
  contactPerson          String
  sentDate               DateTime?
  status                 String   @default("pending") // pending, sent, failed
  metadata               String?  // JSON string for additional data
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  userId                 String
  user                   User     @relation(fields: [userId], references: [id])
  
  @@index([xeroInvoiceId])
  @@index([xeroOrgId])
  @@index([status])
}

model GovernmentBiller {
  id               String   @id @default(cuid())
  agencyName       String
  businessUnitCode String   @unique
  peppolId         String
  category         String?
  parentMinistry   String?
  isPayNowEnabled  Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([businessUnitCode])
  @@index([agencyName])
}